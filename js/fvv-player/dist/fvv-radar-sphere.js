class FvvRadarSpherePlugin{constructor(t,i){this.player=t,this.container=i,this.cameraMap=null,this.sphereRotation={x:-20,y:0},this.isDragging=!1,this.lastMousePos={x:0,y:0},this.initUI(),this.initSphereGrid(),this.addEventListeners(),this.player.addEventListener("statechange",t=>this.onPlayerStateChange(t.detail)),this.player.addEventListener("cameramaploaded",t=>this.onCameraMapLoaded(t.detail)),this.player.addEventListener("activecamerachange",t=>this.onActiveCameraChange(t.detail))}initUI(){this.container.innerHTML='\n      <style>\n          .radar-wrapper-container {\n              /* --- НОВЫЕ CSS ПЕРЕМЕННЫЕ --- */\n              --radar-width: 150px;\n              --radar-height: 150px;\n              --radar-perspective: 600px;\n              --radar-point-color: #00aaff;\n              --radar-point-active-color: #ffcc00;\n              --radar-crosshair-color: lime;\n              --radar-grid-color: rgba(255, 255, 255, 0.2);\n              --radar-bg: radial-gradient(circle at 30% 30%, #555, #222);\n\n              position: absolute; bottom: 60px; right: 10px;\n              display: flex; flex-direction: column; align-items: center;\n              pointer-events: auto;\n          }\n          .radar-wrapper {\n              position: relative;\n              width: var(--radar-width);\n              height: var(--radar-height);\n              perspective: var(--radar-perspective);\n              cursor: grab;\n          }\n          .radar-wrapper.is-scripting { pointer-events: none; opacity: 0.7; }\n          .radar-wrapper:active { cursor: grabbing; }\n          .sphere-container { width: 100%; height: 100%; }\n          .sphere-bg { width: 100%; height: 100%; border-radius: 50%; background: var(--radar-bg); }\n          .grid-svg { position: absolute; top: 0; left: 0; width: 100%; height: 100%; pointer-events: none; overflow: visible; }\n          .radar-point { position: absolute; top: 0; left: 0; width: 10px; height: 10px; background: var(--radar-point-color); border-radius: 50%; border: 1px solid white; margin: -5px 0 0 -5px; transition: background-color 0.2s; }\n          .radar-point.is-active { background-color: var(--radar-point-active-color); box-shadow: 0 0 8px var(--radar-point-active-color); }\n          .crosshair { position: absolute; top: 50%; left: 50%; width: 20px; height: 20px; border: 1px solid var(--radar-crosshair-color); border-radius: 50%; margin: -11px 0 0 -11px; background: radial-gradient(circle, transparent 4px, var(--radar-crosshair-color) 5px); transition: transform 0.1s; pointer-events: none; }\n          .coords-display { margin-top: 5px; background: rgba(0,0,0,0.5); padding: 4px 8px; border-radius: 4px; font-family: monospace; font-size: 10px; text-align: center; }\n      </style>\n      <div class="radar-wrapper-container">\n          <div id="radar-wrapper" class="radar-wrapper">\n              <div class="sphere-container"> <div class="sphere-bg"></div> </div>\n              <svg class="grid-svg"></svg>\n              <div id="radar-crosshair" class="crosshair"></div>\n          </div>\n          <div id="coords-display" class="coords-display"></div>\n      </div>\n    ',this.ui={wrapper:this.container.querySelector("#radar-wrapper"),sphereContainer:this.container.querySelector(".sphere-container"),svg:this.container.querySelector(".grid-svg"),crosshair:this.container.querySelector("#radar-crosshair"),coordsDisplay:this.container.querySelector("#coords-display")}}initSphereGrid(){const t=getComputedStyle(this.ui.wrapper),i=parseInt(t.getPropertyValue("width"),10);this.R=i/2,this.svgGrid={lines:[]};const e=Array.from({length:12},(t,i)=>30*i),r=()=>{const t=document.createElementNS("http://www.w3.org/2000/svg","line");return t.setAttribute("stroke","rgba(255, 255, 255, 0.2)"),t.setAttribute("stroke-width","0.5"),t},a=[30,60,90,120,150].map(t=>{const i=t*Math.PI/180,e=this.R*Math.sin(i),r=this.R*Math.cos(i),a=[];for(let t=0;t<=360;t+=10){const i=t*Math.PI/180;a.push({x:e*Math.cos(i),y:e*Math.sin(i),z:r})}return a}),s=e.map(t=>{const i=t*Math.PI/180,e=[];for(let t=0;t<=180;t+=10){const r=t*Math.PI/180;e.push({x:this.R*Math.sin(r)*Math.cos(i),y:this.R*Math.sin(r)*Math.sin(i),z:this.R*Math.cos(r)})}return e});a.forEach(t=>{for(let i=0;i<t.length-1;i++){const e=r();this.ui.svg.appendChild(e),this.svgGrid.lines.push({line:e,p1:t[i],p2:t[i+1]})}}),s.forEach(t=>{for(let i=0;i<t.length-1;i++){const e=r();this.ui.svg.appendChild(e),this.svgGrid.lines.push({line:e,p1:t[i],p2:t[i+1]})}})}addEventListeners(){this.ui.wrapper.addEventListener("mousedown",t=>{this.player.isPlayingScript||(this.isDragging=!0,this.lastMousePos={x:t.clientX,y:t.clientY})}),window.addEventListener("mousemove",t=>{if(!this.isDragging||this.player.isPlayingScript)return;const i=t.clientX-this.lastMousePos.x,e=t.clientY-this.lastMousePos.y;if(this.lastMousePos={x:t.clientX,y:t.clientY},t.shiftKey){const t=this.player.viewpoint.height-.01*e;this.player.setViewpoint({...this.player.viewpoint,height:Math.max(-1,Math.min(1,t))})}else{const t={x:this.player.sphereRotation.x-.5*e,y:this.player.sphereRotation.y+.5*i};t.x=Math.max(-90,Math.min(90,t.x)),this.player.setSphereRotation(t)}}),window.addEventListener("mouseup",()=>{this.isDragging=!1}),window.addEventListener("mouseleave",()=>{this.isDragging=!1}),this.ui.wrapper.addEventListener("wheel",t=>{if(this.player.isPlayingScript)return;t.preventDefault();const i=this.player.viewpoint.zoom-.05*Math.sign(t.deltaY);this.player.setViewpoint({...this.player.viewpoint,zoom:Math.max(1,i)})})}onPlayerStateChange(t){this.sphereRotation=t.sphereRotation,this.viewpoint=t.viewpoint,this._updateRadarTransform(),this._updateRadarCrosshair(),this._updateCoordsDisplay(),this.ui.wrapper.classList.toggle("is-scripting",this.player.isPlayingScript)}onCameraMapLoaded(t){this.cameraMap=t,this._drawRadarPoints()}onActiveCameraChange(t){this.container.querySelectorAll(".radar-point").forEach(t=>t.classList.remove("is-active"));const i=this.container.querySelector(`#radar-point-${t}`);i&&i.classList.add("is-active")}_rotatePoint(t,i,e,r,a){const s=Math.cos(r),n=Math.sin(r),o=Math.cos(a),h=Math.sin(a),p=i*n+e*s;return{x:t*o+p*h,y:i*s-e*n,z:-t*h+p*o}}_project(t){const i=400/(t.z+400+this.R);return{x:t.x*i,y:t.y*i}}_updateRadarTransform(){const t=this.sphereRotation.x*Math.PI/180,i=this.sphereRotation.y*Math.PI/180,e=this.R;this.svgGrid.lines.forEach(({line:r,p1:a,p2:s})=>{const n=this._rotatePoint(a.x,a.y,a.z,t,i),o=this._rotatePoint(s.x,s.y,s.z,t,i);if(n.z>.9*-this.R&&o.z>.9*-this.R){const t=this._project(n),i=this._project(o);r.setAttribute("x1",t.x+e),r.setAttribute("y1",t.y+e),r.setAttribute("x2",i.x+e),r.setAttribute("y2",i.y+e),r.style.display="block"}else r.style.display="none"}),this.cameraPoints&&Object.values(this.cameraPoints).forEach(r=>{const a=this._rotatePoint(r.p3d.x,r.p3d.y,r.p3d.z,t,i);if(a.z>.5*-this.R){const t=this._project(a);r.element.style.transform=`translate(${t.x+e}px, ${t.y+e}px)`,r.element.style.opacity="1",r.element.style.zIndex=Math.round(a.z)}else r.element.style.opacity="0"})}_drawRadarPoints(){this.cameraMap&&(this.cameraPoints={},this.ui.sphereContainer.querySelectorAll(".radar-point").forEach(t=>t.remove()),this.cameraMap.layout.forEach(t=>{const i=document.createElement("div");i.className="radar-point",i.id=`radar-point-${t.id}`,this.ui.sphereContainer.appendChild(i);const[e,r]=t.pos,a=e*Math.PI/180,s=-r*Math.PI/180;this.cameraPoints[t.id]={element:i,p3d:{x:this.R*Math.cos(s)*Math.sin(a),y:this.R*Math.sin(s),z:this.R*Math.cos(s)*Math.cos(a)}}}),this._updateRadarTransform())}_updateRadarCrosshair(){const t=1+.5*(this.viewpoint.zoom-1);this.ui.crosshair.style.transform=`scale(${t})`}_updateCoordsDisplay(){const t=-this.sphereRotation.x.toFixed(1),i=-this.sphereRotation.y.toFixed(1)%360,e=this.viewpoint.zoom.toFixed(2),r=this.viewpoint.height.toFixed(2);this.ui.coordsDisplay&&(this.ui.coordsDisplay.innerHTML=`\n              Az:${i}° El:${t}°<br>\n              Zoom:${e} Height:${r}\n          `)}}window.FvvRadarPlugins=window.FvvRadarPlugins||{},window.FvvRadarPlugins.Sphere=FvvRadarSpherePlugin;